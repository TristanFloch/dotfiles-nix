#!/usr/bin/env python

import subprocess
import argparse
import pathlib


def parserCreate() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser()
    p.add_argument('--show-trace', action='store_true')
    command = p.add_subparsers(dest='command', help='available commands')

    rebuild = command.add_parser('rebuild')
    rebuild.add_argument('operation', choices=['switch', 'test', 'boot', 'build'])
    rebuild.add_argument('--show-trace', action='store_true')

    update = command.add_parser('update')
    update.add_argument('input', nargs='+', action='append',
                        help='flake input to update', choices=['nixpkgs',
                                                               'home-manager',
                                                               'emacs-overlay',
                                                               'hyprland',
                                                               'webcord'])

    show = command.add_parser('show')

    return p


def findFlakeDir() -> pathlib.PurePath:
    p = pathlib.Path('~/.config/nixpkgs')
    return p.expanduser()


def sexyPrintCmd(cmd: str):
    bold = '\033[;1m'
    italic = '\033[;3m'
    normal = '\033[0m'
    print(f'{italic}Runnning command:{normal} {bold}{cmd}{normal}\n')


def main():
    p = parserCreate()
    args = p.parse_args()

    if not any(vars(args).values()):
        p.print_usage()
        return

    cmd = []
    if args.command == 'rebuild':
        cmd = ['nixos-rebuild', args.operation, '-j6', '--flake', '.#' ]
        if args.operation in [ 'switch', 'test', 'boot' ]:
            cmd = ['sudo'] + cmd;
        if args.show_trace:
            cmd.append('--show-trace')

    elif args.command == 'update':
        cmd = ['nix', 'flake', 'lock']
        for i in args.input[0]:
            cmd += ['--update-input', i]

    elif args.command == 'show':
        cmd = ['nix', 'flake', 'show']

    sexyPrintCmd(subprocess.list2cmdline(cmd))
    path = findFlakeDir()
    subprocess.run(cmd, cwd=path)


if __name__ == '__main__':
    main()
